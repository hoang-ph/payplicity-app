scalar GraphQLDate

enum CategoryType {
  Housing
  Transportation
  Dinning
  Groceries
  Savings
  Entertainment
  UtilitiesAndPhone
  Medical
  Clothing
  Misc
}

enum UserRole {
  Admin
  Basic
}

type Expense {
  _id: ID!
  id: Int!
  owner: String!
  title: String
  description: String!
  category: CategoryType!
  created: GraphQLDate!
  amount: Int!
  paid: Int
  imageSrc: String
  group: GroupType
}

type ExpenseCounts {
  owner: String!
  Housing: Int
  Transportation: Int
  Dinning: Int
  Groceries: Int
  Savings: Int
  Entertainment: Int
  UtilitiesAndPhone: Int
  Medical: int
  Clothing: Int
  Misc: Int
}

type ExpenseListWithPages {
  expenses: [Expense!]!
  pages: Int
}

type GroupType {
  groupName: String
  groupMember: [ {User, UserRole! } ]
}

type User {
  signedIn: Boolean!
  givenName: String
  name: String
  email: String!
  password: String
  group: GroupType
}

"Toned down Expense, used as inputs, without server generated values."
input ExpenseInputs {
  owner: String!
  title: String
  description: String!
  "Optional, if not supplied, will be set to 'Misc'"
  category: CategoryType = Misc
  "Optional, if not supplied, will be set to current day'"
  created: GraphQLDate = new Date()
  amount: Int!
  paid: Int
  imageSrc: String
  group: GroupType
}  

"""Inputs for expenseUpdate: all are optional. Whichever is specified will
be set to the given value, undefined fields will remain unmodified. Remaining
balance (amount) will be subtracted from new paid amount if capable"""
input ExpenseUpdateInputs {
  owner: String
  title: String
  description: String
  category: CategoryType
  created: GraphQLDate
  amount: Int
  paid: Int
  imageSrc: String
  group: GroupType
}
##### Top level declarations
type Query {
  about: String!
  user: User!
  expenseList(
    category: CategoryType
    debtMin: Int
    debtMax: Int
    search: String
    page: Int = 1
  ): ExpenseListWithPages
  expense(id: Int!): Expense!
  expenseCounts(
    category: CategoryType
    debtMin: Int
    debtMax: Int
  ): [ExpenseCounts!]!
}
type Mutation {
  setAboutMessage(message: String!): String
  expenseAdd(expense: ExpenseInputs!): Expense!
  expenseUpdate(id: Int!, changes: ExpenseUpdateInputs!): Expense!
}
