scalar GraphQLDate

enum CategoryType {
  Housing
  Transportation
  Dining
  Groceries
  Savings
  Entertainment
  UtilitiesAndPhone
  Medical
  Clothing
  Misc
}

type Expense {
  _id: ID!
  id: Int!
  owner: User
  email: String!
  title: String
  description: String!
  category: CategoryType!
  created: GraphQLDate!
  amount: Float!
  imageSrc: String
}

type ExpenseCounts {
  owner: String!
  Housing: Int
  Transportation: Int
  Dining: Int
  Groceries: Int
  Savings: Int
  Entertainment: Int
  UtilitiesAndPhone: Int
  Medical: Int
  Clothing: Int
  Misc: Int
}

type ExpenseListWithPages {
  expenses: [Expense!]!
  pages: Int
}

type User {
  signedIn: Boolean!
  givenName: String
  name: String
  email: String!
  password: String
}

"Toned down Expense, used as inputs, without server generated values."
input ExpenseInputs {
  email: String!
  description: String!
  "Optional, if not supplied, will be set to 'Misc'"
  category: CategoryType = Misc
  "Optional, if not supplied, will be set to current day'"
  created: GraphQLDate
  amount: Float!
  imageSrc: String
}  

"""Inputs for expenseUpdate: all are optional. Whichever is specified will
be set to the given value, undefined fields will remain unmodified. Remaining
balance (amount) will be subtracted from new paid amount if capable"""
input ExpenseUpdateInputs {
  description: String
  category: CategoryType
  created: GraphQLDate
  amount: Float
  imageSrc: String
}
##### Top level declarations
type Query {
  home: String!
  user: User!
  expenseList(
    category: CategoryType
    search: String
    page: Int = 1
  ): ExpenseListWithPages
  expense(id: Int!): Expense!
  expenseCounts(
    category: CategoryType
  ): [ExpenseCounts!]!
}
type Mutation {
  expenseAdd(expense: ExpenseInputs!): Expense!
  expenseUpdate(id: Int!, changes: ExpenseUpdateInputs!): Expense!
  expenseDelete(id: Int!): Boolean!
  expenseRestore(id: Int!): Boolean!
}
